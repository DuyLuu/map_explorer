name: iOS Distribution

on:
  # Automatic triggers disabled - manual distribution only
  # push:
  #   branches: [ main, develop ]
  #   paths:
  #     - 'ios/**'
  #     - 'src/**'
  #     - 'package.json'
  #     - '.github/workflows/ios-distribution.yml'
  pull_request:
    branches: [main]
    paths:
      - 'ios/**'
      - 'src/**'
  workflow_dispatch:
    inputs:
      release_notes:
        description: 'Release notes for this build'
        required: false
        default: 'New iOS build from CI/CD'
      distribution_groups:
        description: 'Distribution groups (comma-separated)'
        required: false
        default: 'testers'

jobs:
  build-and-distribute:
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Setup Ruby (for CocoaPods)
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'
          bundler-cache: true

      - name: Cache CocoaPods dependencies
        uses: actions/cache@v4
        with:
          path: ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Install CocoaPods dependencies
        run: |
          cd ios
          pod install --repo-update

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Import Code Signing Certificates
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE_BASE64 }}
          p12-password: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE_PASSWORD }}
        if: env.IOS_DISTRIBUTION_CERTIFICATE_BASE64 != ''
        env:
          IOS_DISTRIBUTION_CERTIFICATE_BASE64: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE_BASE64 }}

      - name: Download Provisioning Profiles
        uses: apple-actions/download-provisioning-profiles@v2
        with:
          bundle-id: org.luubui.worldexplorer
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
        if: env.APPSTORE_ISSUER_ID != ''
        env:
          APPSTORE_ISSUER_ID: ${{ secrets.APPSTORE_ISSUER_ID }}

      - name: Build iOS Archive
        run: |
          cd ios

          # Create build directory
          mkdir -p build

          # Build and archive
          xcodebuild \
            -workspace WorldExplorer.xcworkspace \
            -scheme WorldExplorer \
            -configuration Release \
            -destination "generic/platform=iOS" \
            -archivePath build/WorldExplorer.xcarchive \
            archive \
            CODE_SIGN_STYLE=Automatic \
            DEVELOPMENT_TEAM="${{ secrets.DEVELOPMENT_TEAM_ID }}" \
            CODE_SIGN_IDENTITY="iPhone Distribution"
        env:
          DEVELOPMENT_TEAM_ID: ${{ secrets.DEVELOPMENT_TEAM_ID }}

      - name: Export IPA
        run: |
          cd ios

          # Create export options plist
          cat > build/ExportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>development</string>
              <key>teamID</key>
              <string>${{ secrets.DEVELOPMENT_TEAM_ID }}</string>
              <key>compileBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <true/>
              <key>signingStyle</key>
              <string>automatic</string>
          </dict>
          </plist>
          EOF

          # Export IPA
          xcodebuild \
            -exportArchive \
            -archivePath build/WorldExplorer.xcarchive \
            -exportPath build \
            -exportOptionsPlist build/ExportOptions.plist
        env:
          DEVELOPMENT_TEAM_ID: ${{ secrets.DEVELOPMENT_TEAM_ID }}

      - name: Setup Firebase Service Account
        run: |
          echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}" | base64 --decode > /tmp/firebase-service-account.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=/tmp/firebase-service-account.json" >> $GITHUB_ENV
        env:
          FIREBASE_SERVICE_ACCOUNT_KEY: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}

      - name: Distribute to Firebase App Distribution
        run: |
          cd ios

          # Set release notes
          RELEASE_NOTES="${{ github.event.inputs.release_notes }}"
          if [ -z "$RELEASE_NOTES" ]; then
            RELEASE_NOTES="Build from commit: ${{ github.sha }}"
          fi

          # Set distribution groups
          GROUPS="${{ github.event.inputs.distribution_groups }}"
          if [ -z "$GROUPS" ]; then
            GROUPS="testers"
          fi

          # Find IPA file
          IPA_FILE=$(find build -name "*.ipa" | head -1)

          if [ -z "$IPA_FILE" ]; then
            echo "‚ùå IPA file not found"
            exit 1
          fi

          echo "üì± Distributing IPA: $IPA_FILE"
          echo "üìù Release notes: $RELEASE_NOTES"
          echo "üë• Groups: $GROUPS"

          # Distribute using Firebase CLI
          firebase appdistribution:distribute "$IPA_FILE" \
            --app "1:264542140465:ios:34ab91b3503d52204abd10" \
            --groups "$GROUPS" \
            --release-notes "$RELEASE_NOTES"

      - name: Upload IPA as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa
          path: ios/build/*.ipa
          retention-days: 30

      - name: Cleanup
        if: always()
        run: |
          rm -f /tmp/firebase-service-account.json

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ü§ñ **iOS Build Complete!** üçé\n\nThe iOS IPA has been built and distributed to Firebase App Distribution.\n\n‚úÖ Check the [Firebase Console](https://console.firebase.google.com/project/world-explorer-c13fd/appdistribution) for the latest build.'
            })
